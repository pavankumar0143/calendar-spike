// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    output          = "../src/generated/prisma-client"
    binaryTargets   = env("PRISMA_BINARY_TARGET")
    previewFeatures = ["relationJoins", "views", "prismaSchemaFolder"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model AppointmentCalendarUser {
    id                  String                            @id @default(uuid())
    email               String                            @unique
    name                String
    googleCalendarId    String?                           @map("google_calendar_id")
    googleRefreshToken  String?                           @map("google_refresh_token")
    googleAccessToken   String?                           @map("google_access_token")
    googleTokenExpiry   DateTime?                         @map("google_token_expiry")
    isCalendarConnected Boolean                           @default(false) @map("is_calendar_connected")
    createdAt           DateTime                          @default(now()) @map("created_at")
    updatedAt           DateTime                          @updatedAt @map("updated_at")
    appointments        AppointmentCalendarAppointment[]
    availability        AppointmentCalendarAvailability[]

    @@map("appointment_calendar_users")
}

model AppointmentCalendarAppointment {
    id            String                  @id @default(uuid())
    userId        String                  @map("user_id")
    user          AppointmentCalendarUser @relation(fields: [userId], references: [id], onDelete: Cascade)
    title         String
    description   String?
    startTime     DateTime                @map("start_time")
    endTime       DateTime                @map("end_time")
    googleEventId String?                 @map("google_event_id")
    location      String?
    status        String                  @default("scheduled")
    createdAt     DateTime                @default(now()) @map("created_at")
    updatedAt     DateTime                @updatedAt @map("updated_at")

    @@map("appointment_calendar_appointments")
}

model AppointmentCalendarAvailability {
    id          String                  @id @default(uuid())
    userId      String                  @map("user_id")
    user        AppointmentCalendarUser @relation(fields: [userId], references: [id], onDelete: Cascade)
    dayOfWeek   Int                     @map("day_of_week") // 0-6 (Sunday-Saturday)
    startTime   DateTime                @map("start_time") @db.Time()
    endTime     DateTime                @map("end_time") @db.Time()
    isAvailable Boolean                 @default(true)
    createdAt   DateTime                @default(now()) @map("created_at")
    updatedAt   DateTime                @updatedAt @map("updated_at")

    @@unique([userId, dayOfWeek, startTime, endTime])
    @@map("appointment_calendar_availability")
}
